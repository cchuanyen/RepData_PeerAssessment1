for(i in 1:nc){
means[1] <- mean(y[, i], na.rm = removeNA)
}
means
}
columnmean(airquality)
exit
getwd()
x <- "hello"
x
x <- "hello" #first time programming in R
y <- "10"
mdec <- "I like my facilitator from MMU"
"hello" -> x
x
"I like my facilitator from MMU" -> mdec
mdec
y
ccy <- "Chai Chuan Yen"
ccy
"Chai Chuan Yen" -> ccy
ccy
10
10L
NaN
"hello" -> x
class(x)
y <- 10
class(y)
class(ccy)
z <- 10L
class(z)
x1 <- c("a", "b", "c")
x2 <- c("a", 1, 2)
x3 <- c(TRUE, FALSE)
x4 <- 1:10
length(x1)
x1[1]
x4[8]
x1[1:2]
x1[3]
x3[1:2]
x3[2]
x4[5]
x <- list(3, "c"0
x <- list(3, "c")
y <- list(1, "a", TRUE, 1 + 4i)
z <- list(var1 = 1:4, var2 = 0.6)
x
y
z
x[[1]]
x[[2]]
y[[3]]
z$var1
z$var2
x <- matrix(1:6, nrow=2, ncol=3)
y <- matrix(1:10, nrow=5, ncol=3)
y <- matrix(1:10, nrow=5, ncol=2)
y
x
x[1,2]
y[[1]]
x[2,1]
x[1, ]
y[ ,2]
y[ ,1]
x <- c(1, 2, 3, 4, NA, 0/0)
x
is.na(x)
is.nan(x)
row.names
read.table()
read.csv()
data.frame()
x <- 1:5)
x <- 1:5
y <- c("a", "b", "c", "d", "e")
df <- data.frame(x,y)
nrow(df)
View(df)
names(df)
names(df)<-c("num", "grade")
View(df)
df
read.tablee()
read.csv()
df <- read.csv("001.csv")
x <- c("a", "b", "c", "d")
for(i in 1:4){
print(x[i]
}
for(i in seq_along(x)){
print(x[i])
}
for(letter in x){
print(letter)
}
for(i in 1:length(x)){
print(x[i])
}
if(x == "a"){
y <- 10
}
else if (x == "b"){
if (x == "b"){
y <- 20
}
{y <- 30}
while(count < 10){
print(count)
count <- count + 1
}
count <- 0
while(count < 10){
count <- count + 1
}
today <- "14/6/2015"
class(today)
today.date <- as.Date(today,"%d/%m/%Y")
today.date
class(today.date)
unclass(today.date)
date1 <- as.PISIXct("2015-05-28 01:00:00")
date1 <- as.POSIXct("2015-05-28 01:00:00")
date2 <- as.POSIXct("2015-05-28 01:00:00")
date2 <- as.POSIXct("2015-06-28 01:00:00")
date1-date2
paste("a", "b", sep="")
paste("a", "b", sep="***")
paste("a", "b", "c", sep="***")
paste("a", "b", "c", "d", sep="***")
source("http://d396qusza40orc.cloudfront.net/rprog%2Fscripts%2Fsubmitscript1.R")
q()
x <- list(a = 1:5), b = rnorm(10))
x <- list(a = 1:5, b = rnorm(10))
lapply(x, mean)
x <- list(a = 1:4, b = rnorm(10), c = rnorm(20, 1), d = rnorm(100, 5))
lapply(x, mean)
lapply(x, mean)
x <- 1:4
lapply(x, runif)
x <- 1:4
lapply(x, runif, min = 0, max = 10)
x <- list(a = matrix(1:4, 2, 2), b = matrix(1:6, 3, 2))
x
lapply(x, function(elt[,1])
lapply(x, function(elt) elt[,1])
x <- list(a = 1:4, b = rnorm(10), c = rnorm(20, 1), d = rnorm(100, 5))
lapply(x, mean)
sapply(x, mean)
mean(x)
x <- matrix(rnorm(200), 20, 10)
apply(x, 2, mean)
apply(x, 1, sum)
x <- matrix(rnorm(200), 20, 10)
apply(x, 1, quantile, rpbs = c(0.25, 0.75))
a <- array(rnorm(2 * 2 * 10), c(2, 2, 10))
apply(a, c(1, 2), mean)
rowMeans(a, dims = 2)
str(mapply)
mapply(rep, 1:4, 4:1)
noise <- function(n, mean, sd)
rnorm(n, mean, sd)
noise <- function(n, mean, sd){
rnorm(n, mean, sd)
}
noise(5, 1, 2)
noise(1:5, 1:5, 2)
mapply(noise, 1:5, 1:5, 2)
str(tapply)
x <- c(rnorm(10), runif(10), rnorm(10, 1))
f <- gl(3, 10)
f
tapply(x, f, mean)
tapply(x, f, mean, simplify = FALSE)
str(split)
x <- c(rnorm(10), runif(10), rnorm(10, 1))
f <- gl(3, 10)
split(x, f)
lapply(split(x, f), mean)
s <- split(airquality, airquality$Month)
lapply(s, function(x) colMeans(x[, c("Ozone", "solar.R", "Wind")])]))
lapply(s, function(x) colMeans(x[, c("Ozone", "solar.R", "Wind")]))
lapply(s, function(x) colMeans(x[, c("Ozone", "Solar.R", "Wind")]))
sapply(s, function(x) colMeans(x[, c("Ozone", "Solar.R", "Wind")]))
sapply(s, function(x) colMeans(x[, c("Ozone", "Solar.R", "Wind")], na.rm = TRUE))
x <- rnorm(10)
f1 <- gl(2,5)
f2 <- gl(5,2)
f1
f2
interaction(f1, f2)
str(split(x, list(f1, f2)))
str(split(x, list(f1, f2), drop = TRUE))
library(datasets)
data(mtcars)
?mtcars
tapply(mtcars$mpg.mtcars$cyl)
tapply(mtcars$mpg, mtcars$cyl, mean)
debug(ls)
ls
tapply(mpg, cyl, mean))
with(mtcars, tapply(mpg, cyl, mean))
with(mtcars, tapply(cyl))
with(mtcars, tapply(cyl[4, 8]))
head(iris)
summary(iris)
colMeans(iris)
summary(iris)
colMeans(iris[,1:4])
head(mtcars)
table(mtcars$cyl)
summary(mtcars)
tapply(mtcars$cyl, mtcars$mpg, mean)
tapply(mtcars$cyl, mtcars$mpg, mean)
# aggregate
# tapply
# absolute
tapply(mtcars$hp, [,4])
mean(x)
traceback()
1:mean(x)
lm(y ~ x)
traceback()
debug(lm)
lm(y ~ x)
options(error = recover)
read.csv("nosuchfile")
recover
debug
exit
quit
quit
str(lm)
str(ls)
x <- rnorm(100, 2, 4)
summary(x)
summary(f)
library(datasets)
head(airquality)
str(airquality)
m <- matrix(rnorm(100), 10, 10)
str(m)
m[, 1]
s <- split(airquality, airquality$Month)
str(s)
dnorm(x, mean = 0, sd = 1, log = FALSE)
pnorm(q, mean = 0, sd = 1, lower.tail = TRUE, log.p = FALSE)
X <- RNORM(10)
X
X <- RNORM(10, 20, 2)
x <- rnorm(10)
set.seed(1)
rnorm(5)
dnorm(x, mean = 0, sd = 1, log = FALSE)
pnorm(q, mean = 0, sd = 1, lower.tail = TRUE, log.p = FALSE)
x <- rnorm(10)
x
x <- rnorm(10, 20, 2)
x
summary(x)
set.seed(1)
rnorm(5)
rnorm(5)
set.seed(1)
rnorm(5)
rpois(10, 1)
rpois(10, 2)
rpois(10, 20)
ppois(2, 2) ## Cumulative distribution
ppois(4, 2)
ppois(6, 2)
set.seed(20)
x <- rnorm(100, 0, 2)
e <- rnorm(100, 0, 2)
y <- 0.5 + 2 * x + e
summary(y)
plot(x, y)
set.seed(1)
x <- rnorm(100)
log.mu <- 0.5 + 0.3 * x
y <- rpois(100, exp(log.mu))
summary(y)
plot(x, y)
set.seed(1)
sample(1:10, 4)
sample(1:10, 4)
sample(letters, 5)
sample(1, 10) ## permutation
sample(1:10)
sample(1:10, replace = TRUE)
sample(1:10, replace = TRUE) Sample w/replacement
## Elapsed time > user time
hilbert <- function(n) {
i <- 1:n
1 / outer (i - l, i, "+")
}
x <- hilbert(1000)
system.time(svd(x))
1 / outer (i - 1, i, "+")
system.time({)
summaryRprof()
## lm(y ~ x)
sample.interval=10000
"list" "eval" "eval" "model.frame.default" "model.frame" "eval" "eval" "lm"
"lm.fit" "lm"
"by.total"
"by.self"
$by.total
"lm"
"lm.fit"
"model.frame.default"
"eval"
"na.omit"
"na.omit.data.frame"
"lapply"
$by.self
"as.character"
"model.frame.default"
"anyDuplicated.default"
$sample.interval
[1] 0.02
$sampling.time
set.seed(1)
rpois(5,2)
set.seed(10)
x <- rep(0:1, each = 5)
e <- rnorm(10, 0, 20)
y <- 0.5 + 2 * x + e
library(datasets)
Rprof()
fit <- lm(y ~ x1 + x2)
fit <- lm(y ~ x1 + x2)
Rprof(NULL)
setwd("./data")
getwd()
if(!file.exists("data")){
dir.create("data")
}
fileUrl <- "https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Fss06hid.csv?accessType=DOWNLOAD"
download.file(fileUrl, destfile = "./data/%2Fdata%2Fss06hid.csv", method = "curl")
download.file(fileUrl, destfile = "./data/%2Fdata%2Fss06hid.csv")
## [1] "%2Fdata%2Fss06hid.csv"
dateDownloaded <- date()
dateDownloaded
load("~/.RData")
getwd()
idahoData <- read.csv("%2Fdata%2Fss06hid.csv")
read.csv
idahoData <- ("./%2Fdata%2Fss06hid.csv")
head(idahoData)
getwd()
if(!file.exists("data"))
fileUrl <- "https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Fss06hid.csv?accessType=DOWNLOAD"
download.file(fileUrl, destfile = "./data/%2Fdata%2Fss06hid.csv")
dateDownloaded <- date()
dateDownloaded
idahoData <- read.table("./data/%2Fdata%2Fss06hid.csv", sep = ",", header = TRUE)
head(idahoData)
getwd()
list.files(".")
dateDownloaded <- date()
dateDownloaded
Idaho <- read.csv("Idaho.csv")
Idaho <- read.csv
head(Idaho)
download.file(u)rl=fileUrl,destfile="getdata%2Fdata%2Fss06hid.csv"
download.file(url=fileUrl,destfile="getdata%2Fdata%2Fss06hid.csv")
list.files(".")
dateDownloaded <- date()
dateDownloade
dateDownloaded
Idaho <- read.csv("getdata%2Fdata%2Fss06hid.csv")
head(Idaho)
length(Idaho$VAL[!is.na(Idaho$VAL) & Idaho$VAL==24])
if(!file.exists("data")){dir.create("data")}
fileUrl <- https://data.baltimorecity.gov/Transportation/Baltimore-Fixed-Speed-Cameras/dz54-2aru.rows.xlsx?accessType=DOWNLOAD""
fileUrl <- "https://data.baltimorecity.gov/Transportation/Baltimore-Fixed-Speed-Cameras/dz54-2aru.rows.xlsx?accessType=DOWNLOAD"
download.file(fileUrl,destfile="./data/cameras.xlsx", method="curl")
download.file(fileUrl,destfile="./data/cameras.xlsx")
dateDownloaded <- date()
dateDownloaded
fileUrl <- "https://data.baltimorecity.gov/Transportation/Baltimore-Fixed-Speed-Cameras/dz54-2aru.rows.xlsx?accessType=DOWNLOAD"
download.file(fileUrl,destfile="./data/cameras.xlsx")
library(xlsx)
if(!file.exists("data")){dir.create("data")}
if(!file.exists("data")){dir.create("data")}
fileUrl <- "https://data.baltimorecity.gov/Transportation/Baltimore-Fixed-Speed-Cameras/dz54-2aru.rows.xlsx?accessType=DOWNLOAD"
download.file(fileUrl,destfile="./data/cameras.xlsx")
xpathSApply(rootNode,"//name", xmlValue)
fileUrl <- "http://espn.go.com/nfl/team/_?name/bal/baltimore-ravens"
doc <- htmlTreeParse(fileUrl,useInternal=TRUE)
DT[,list(mean(x),sum(z))]
big_df <- data.frame(x=rnorm(1E6), y=rnorm(1E6))
file <- tempfile()
write.table(big_df, file=file, row.names)
exit
quit
Idaho <- read.csv("getdata-data-ss06hid.csv")
getwd()
Idaho <- read.csv("getdata-data-ss06hid.csv")
download.file(fileUrl,destfile="./data/cameras.xlsx", method="curl")
getwd
getwd()
con = url("http://scholar.google.com/citations?user=HI-I6C0AAAAJ&hl=en")
library(httr); html2-GET(url)
content2=content(html2,as="text")
con = url("http://scholar.google.com/citations?user=HI-I6C0AAAAJ&hl=en")
htmlCode = readLines(con)
close(con)
htmlCode
library(XML)
url <- "http://scholar.google.com/citations?user=HI-I6C0AAAAJ&hl=en"
html <- htmlTreeParse(url, useInternalNodes=T)
xpathSApply(html, "//title", xmlValue)
pgl = GET("http://httpbin.org/basic-auth/user/passwd")
pgl
Response[http://httpbin.org/basic-auth/user/passwd]
google = handle("http://google.com")
pg1 = GET(handle=google,path="/")
setwd(C:\Users\COMPAQ\datasciencecoursera\Module 4 Course Project 1)
library(datasets)
library(lattice)
## Convert 'Month' to a factor variable
airquality <- transform(airquality, Month = factor(Month))
xyplot(Ozone ~ Wind | Month, data = airquality, layout = c(5, 1))
set.seed(10)
x <- rnorm(100)
f <- rep(0:1, each = 50)
x <- x + f - f * x + rnorm(100, sd = 0.5)
f <- factor(f, labels = c("Group 1", "Group 2"))
xyplot(y ~ x | f, layout = c(2, 1)) ## Plot with 2 panels
library(nlme)
library(lattice)
xyplot(weight ~ Time | Diet, BodyWeight)
library(datasets)
data(airquality)
qplot(Wind, Ozone, Data = airquality, facets = . ~ Month)
qplot(Wind, Ozone, data = airquality, facets = . ~ factorMonth)
library(ggplot2)
install.packages(ggplot2)
install.packages(ggplot)
g <- ggplot(movies, aes(votes, rating))
install.packages(ggplot2)
library(ggplot2)
install.packages(ggplot2)
gplot(votes, rating, data = movies)
names(trainSpam)
library(kernlab)
install.packages(kernlab)
install.packages("kernlab")
library(kernlab)
data(spam)
set.seed(3435)
trainIndicator = rbinom(4601, size = 1, prob = 0.5)
table(trainIndicator)
trainSpam = spam[trainIndicator == 1, ]
testSpam = spam[trainIndicator == 0, ]
names(trainSpam)
View(trainSpam)
plot(trainspam$capitalAve ~ trainSpam$type)
table(trainSpam$type)
plot(trainspam$capitalAve ~ trainSpam$type)
plot(trainSpam$capitalAve ~ trainSpam$type)
plot(log10(trainSpam$capitalAve + 1) ~ trainSpam$type)
View(testSpam)
View(trainSpam)
plot(log10(trainSpam[, 1:4] + 1))
hCluster = hclust(distr(t(trainSpam[, 1:57])))
hCluster = hclust(dist(t(trainSpam[, 1:57])))
My first R Markdown document
===========================
```{r}
```{r} My First R Markdown document```
### loading the car dataset
In this section, I shall explain how to load the build-in dataset named **mtcars**
library(knitr)
knit2html("document.Rmd")
browseURL("document.html")
```{r}
library(datasets)
library(ggplot2)
install.packages(ggplot2)
install.packages("ggplot2")
str(mtcars)```
```{r} ggplot(mtcars, aes(wt, mpg)) + geom_point(aes(colour=factor(cyl), size = qsec))```
My first R Markdown document
============================
### loading the car dataset
In this section, I shall explain how to load the build-in dataset named **mtcars**.
library(knitr)
knit2html("document.Rmd")
browseURL("document.html")
install.packages("Rmd")
```{r}
library(datasets)
library(ggplot2)
str(
```{r}
library(datasets)
library(ggplot2)
str(mtcars)```
```{r}
ggplot(mtcars, aes(wt, mpg)) + geom_point(aes(colour=factor(cyl), size = qsec))
```
```{r} library(datasets) library(ggplot2) str(mtcars)```
```{r}
ggplot(mtcars, aes(wt, mpg)) + geom_point(aes(colour=factor(cyl), size = qsec))
```
```{r echo=FALSE}   HIST(IRIS[[2]])```
setwd("C:/Users/COMPAQ/data/RepData_PeerAssessment1")
